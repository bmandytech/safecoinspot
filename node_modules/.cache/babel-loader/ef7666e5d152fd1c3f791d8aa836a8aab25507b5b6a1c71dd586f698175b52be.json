{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\crypto-frontend\\\\src\\\\pages\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ReCAPTCHA from 'react-google-recaptcha'; // Add ReCAPTCHA component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = ({\n  recaptchaEnabled\n}) => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [recaptchaToken, setRecaptchaToken] = useState(null);\n  const [biometricError, setBiometricError] = useState('');\n  const navigate = useNavigate();\n  const handleLogin = async e => {\n    e.preventDefault();\n    if (recaptchaEnabled && !recaptchaToken) {\n      setError('Please complete the reCAPTCHA');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password,\n          recaptchaToken\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        localStorage.setItem('authToken', data.token);\n        navigate('/profile');\n      } else {\n        setError('Invalid email or password');\n      }\n    } catch (err) {\n      setError('An error occurred. Please try again.');\n    }\n  };\n\n  // Function to handle biometric login (face scan/fingerprint)\n  const handleBiometricLogin = async () => {\n    try {\n      // For demonstration, this would interact with the WebAuthn API or your biometric solution.\n      const bioLoginResponse = await fetch('http://localhost:5000/api/biometric-login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        // Send the necessary biometric data (e.g., face scan or fingerprint)\n        body: JSON.stringify({\n          biometricData: 'example-data'\n        })\n      });\n      const data = await bioLoginResponse.json();\n      if (data.success) {\n        localStorage.setItem('authToken', data.token);\n        navigate('/profile');\n      } else {\n        setBiometricError('Biometric authentication failed.');\n      }\n    } catch (err) {\n      setBiometricError('An error occurred with biometric authentication.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center items-center min-h-screen bg-gray-900\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"bg-gray-800 p-8 rounded-lg shadow-lg w-96\",\n      onSubmit: handleLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold text-yellow-500 mb-4\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Email\",\n        className: \"w-full p-3 mb-4 bg-gray-700 text-white rounded\",\n        value: email,\n        onChange: e => setEmail(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        className: \"w-full p-3 mb-4 bg-gray-700 text-white rounded\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-500 text-sm mb-4\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 19\n      }, this), biometricError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-500 text-sm mb-4\",\n        children: biometricError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 28\n      }, this), recaptchaEnabled && /*#__PURE__*/_jsxDEV(ReCAPTCHA, {\n        sitekey: process.env.REACT_APP_RECAPTCHA_SITE_KEY,\n        onChange: token => setRecaptchaToken(token)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"w-full bg-yellow-500 text-gray-900 p-3 rounded\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleBiometricLogin,\n        className: \"w-full mt-4 bg-blue-500 text-white p-3 rounded\",\n        children: \"Login with Biometric Authentication\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"kMaW5liQYpuLOlBr7Pdp+Uh9TTE=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","ReCAPTCHA","jsxDEV","_jsxDEV","Login","recaptchaEnabled","_s","email","setEmail","password","setPassword","error","setError","recaptchaToken","setRecaptchaToken","biometricError","setBiometricError","navigate","handleLogin","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","success","localStorage","setItem","token","err","handleBiometricLogin","bioLoginResponse","biometricData","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","sitekey","process","env","REACT_APP_RECAPTCHA_SITE_KEY","onClick","_c","$RefreshReg$"],"sources":["C:/Users/HP/crypto-frontend/src/pages/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ReCAPTCHA from 'react-google-recaptcha';  // Add ReCAPTCHA component\r\n\r\nconst Login = ({ recaptchaEnabled }) => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [recaptchaToken, setRecaptchaToken] = useState(null);\r\n  const [biometricError, setBiometricError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (recaptchaEnabled && !recaptchaToken) {\r\n      setError('Please complete the reCAPTCHA');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password, recaptchaToken }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        localStorage.setItem('authToken', data.token);\r\n        navigate('/profile');\r\n      } else {\r\n        setError('Invalid email or password');\r\n      }\r\n    } catch (err) {\r\n      setError('An error occurred. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Function to handle biometric login (face scan/fingerprint)\r\n  const handleBiometricLogin = async () => {\r\n    try {\r\n      // For demonstration, this would interact with the WebAuthn API or your biometric solution.\r\n      const bioLoginResponse = await fetch('http://localhost:5000/api/biometric-login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        // Send the necessary biometric data (e.g., face scan or fingerprint)\r\n        body: JSON.stringify({ biometricData: 'example-data' }),\r\n      });\r\n\r\n      const data = await bioLoginResponse.json();\r\n\r\n      if (data.success) {\r\n        localStorage.setItem('authToken', data.token);\r\n        navigate('/profile');\r\n      } else {\r\n        setBiometricError('Biometric authentication failed.');\r\n      }\r\n    } catch (err) {\r\n      setBiometricError('An error occurred with biometric authentication.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center min-h-screen bg-gray-900\">\r\n      <form className=\"bg-gray-800 p-8 rounded-lg shadow-lg w-96\" onSubmit={handleLogin}>\r\n        <h2 className=\"text-2xl font-semibold text-yellow-500 mb-4\">Login</h2>\r\n        \r\n        {/* Email and password input fields */}\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          className=\"w-full p-3 mb-4 bg-gray-700 text-white rounded\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          className=\"w-full p-3 mb-4 bg-gray-700 text-white rounded\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        \r\n        {/* Error messages */}\r\n        {error && <p className=\"text-red-500 text-sm mb-4\">{error}</p>}\r\n        {biometricError && <p className=\"text-red-500 text-sm mb-4\">{biometricError}</p>}\r\n\r\n        {/* Conditionally render reCAPTCHA */}\r\n        {recaptchaEnabled && (\r\n          <ReCAPTCHA\r\n            sitekey={process.env.REACT_APP_RECAPTCHA_SITE_KEY}\r\n            onChange={(token) => setRecaptchaToken(token)}\r\n          />\r\n        )}\r\n\r\n        {/* Login button */}\r\n        <button type=\"submit\" className=\"w-full bg-yellow-500 text-gray-900 p-3 rounded\">\r\n          Login\r\n        </button>\r\n        \r\n        {/* Biometric login button */}\r\n        <button\r\n          type=\"button\"\r\n          onClick={handleBiometricLogin}\r\n          className=\"w-full mt-4 bg-blue-500 text-white p-3 rounded\"\r\n        >\r\n          Login with Biometric Authentication\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}